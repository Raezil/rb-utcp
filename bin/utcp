#!/usr/bin/env ruby
# frozen_string_literal: true
$LOAD_PATH.unshift(File.expand_path("../lib", __dir__))
require "json"
require "utcp"

usage = <<~TXT
Usage:
  ruby bin/utcp list <providers.json>
  ruby bin/utcp call <providers.json> <provider.tool> --args '<json>' [--stream]
TXT

cmd = ARGV.shift
if !cmd || %w[--help -h help].include?(cmd)
  puts usage
  exit 0
end

providers_path = ARGV.shift or abort usage

client = Utcp::Client.create({ "providers_file_path" => providers_path })

case cmd
when "list"
  client.repo.providers.each do |p|
    puts "Provider: #{p}"
  end
  client.repo.all_tools.each do |t|
    # We don't store full_name on the tool, so reconstruct from repo map if needed
    # For CLI simplicity, print provider + tool name by scanning repo mapping
    # (small overhead acceptable here)
    client.repo.providers.each do |prov|
      begin
        if client.repo.find("#{prov}.#{t.name}") == t
          puts "  - #{prov}.#{t.name} :: #{t.description}"
        end
      rescue
      end
    end
  end
when "call"
  tool = ARGV.shift or abort usage
  args = {}
  while a = ARGV.shift
    if a == "--args"
      args = JSON.parse(ARGV.shift || "{}") rescue {}
    elsif a == "--stream"
      stream = true
    end
  end
  if stream
    client.call_tool(tool, args, stream: true) do |chunk|
      puts chunk
    end
  else
    res = client.call_tool(tool, args)
    puts JSON.pretty_generate(res) rescue puts(res.to_s)
  end
else
  abort usage
end
